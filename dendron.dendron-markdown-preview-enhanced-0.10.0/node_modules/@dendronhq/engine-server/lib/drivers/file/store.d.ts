import { DEngineStore, DEngineStoreWriteOpts, DNodeData, DNodeRawProps, EngineQueryResp, IDNode, NoteRawProps, QueryMode, QueryOpts, SchemaRawProps, StoreGetResp, StoreQueryOpts, StoreDeleteOpts } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
interface FileStorageOpts {
    root: string;
    logger?: DLogger;
}
export declare function fileNameToTitle(name: string): string;
export declare abstract class FileStorageBase {
    opts: FileStorageOpts;
    idToPath: {
        [key: string]: string;
    };
    rootId: string;
    logger: DLogger;
    constructor(opts: FileStorageOpts);
    abstract doGetFile(id: string): DNodeRawProps<DNodeData>;
    isRoot(id: string): boolean;
    getRoot(): Promise<Required<import("@dendronhq/common-all").DNodeRawOpts<DNodeData>>>;
    get(id: string, _opts?: QueryOpts): Promise<StoreGetResp>;
}
export declare class FileStorage extends FileStorageBase implements DEngineStore {
    files2Notes(fpaths: string[]): NoteRawProps[];
    doGetFile(id: string): DNodeRawProps<DNodeData>;
    _getNoteAll(): Promise<NoteRawProps[]>;
    _getSchemaAll(): Promise<SchemaRawProps[]>;
    _writeFile(node: IDNode): void;
    isQueryAll(qs: string): boolean;
    /**
     * Throws:
     *  - DendronError
     * @param id
     */
    delete(id: string, opts?: StoreDeleteOpts): Promise<void>;
    query(queryString: string, mode: QueryMode, _opts?: StoreQueryOpts): Promise<EngineQueryResp>;
    deleteFromIdToPath(id: string): void;
    refreshIdToPath(nodes: IDNode[]): void;
    write(node: IDNode, opts?: DEngineStoreWriteOpts): Promise<void>;
    /**
     * Add to storage cache
     * @param nodes
     */
    updateNodes(nodes: IDNode[]): Promise<void>;
}
export default FileStorage;
