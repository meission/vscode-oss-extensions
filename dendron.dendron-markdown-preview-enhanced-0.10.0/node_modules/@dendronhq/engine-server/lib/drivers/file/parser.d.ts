import { DEngineStore, Note, SchemaRawProps, SchemaRawV1 } from "@dendronhq/common-all";
import { DLogger, pino } from "@dendronhq/common-server";
export declare type FileMeta = {
    prefix: string;
    fpath: string;
};
declare type FileParserOpts = {
    errorOnEmpty?: boolean;
    errorOnBadParse?: boolean;
    logger?: pino.Logger;
};
declare type FileParserProps = Required<FileParserOpts>;
export declare class FileParserUtils {
    static parseSchemaVersion1(schema: SchemaRawV1, opts: {
        fname: string;
        root: string;
    }): SchemaRawProps[];
    static parseSchemaFile(fpath: string, opts: {
        root: string;
    }): SchemaRawProps[];
}
export declare class FileParser {
    errors: any[];
    opts: FileParserProps;
    missing: Set<string>;
    store: DEngineStore;
    logger: DLogger;
    constructor(store: DEngineStore, opts?: FileParserOpts);
    toNode(ent: FileMeta, parents: Note[], store: DEngineStore, opts?: {
        errorOnEmpty?: boolean;
        isRoot?: boolean;
        errorOnBadParse?: boolean;
    }): {
        node: Note | null;
        missing: string | null;
    };
    parseSchema(data: string[]): SchemaRawProps[];
    /**
     * Returns list of notes withou parent/child information
     * @param data
     */
    parse(data: string[]): Note[];
    report(): {
        numErrors: number;
        errors: any[];
        missing: string[];
    };
}
export {};
