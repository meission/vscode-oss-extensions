"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_all_1 = require("@dendronhq/common-all");
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const testUtils_1 = require("../../../testUtils");
describe("main", () => {
    let root;
    let store;
    beforeEach(() => {
        root = common_server_1.EngineTestUtils.setupStoreDir();
        store = testUtils_1.createFileStorage(root);
    });
    afterEach(() => {
        fs_extra_1.default.removeSync(root);
    });
    describe("notes", () => {
        let queryMode;
        beforeAll(() => {
            queryMode = "note";
        });
        describe("delete", () => {
            test("delete foo.one", async () => {
                const resp = await store.query("**/*", queryMode, {});
                const nodeOrig = lodash_1.default.find(resp.data, (n) => n.title === "foo.one");
                await store.delete(nodeOrig.id);
                await expect(store.get(nodeOrig.id, {})).rejects.toThrow(common_all_1.AssertionError);
                expect(() => {
                    common_server_1.FileTestUtils.readMDFile(root, "foo.one.md");
                }).toThrow(/ENOENT/);
            });
        });
        describe("get", () => {
            test("get root", async () => {
                const resp = await store.query("**/*", queryMode, {});
                const nodeOrig = lodash_1.default.find(resp.data, (n) => n.title === "root");
                const respGet = await store.get(nodeOrig.id, {});
                const node = respGet.data;
                expect(node).not.toBeUndefined();
                expect(node.fname).toEqual("root");
            });
            test("get foo.one", async () => {
                const resp = await store.query("**/*", queryMode, {});
                const nodeOrig = lodash_1.default.find(resp.data, (n) => n.title === "foo.one");
                const respGet = await store.get(nodeOrig.id, {});
                const node = respGet.data;
                expect(node).not.toBeUndefined();
                expect(node.fname).toEqual("foo.one");
            });
        });
        /**
         * Hiearchy:
         * - foo
         *   - foo.one
         *   - foo.two
         */
        describe("query", () => {
            test("with missing", async () => {
                common_server_1.FileTestUtils.writeMDFile(root, "bar.one.alpha.md", {}, "bar alpha content");
                store = testUtils_1.createFileStorage(root);
                const resp = await store.query("**/*", queryMode, {});
                const bar = lodash_1.default.find(resp.data, { fname: "bar" });
                const barOne = lodash_1.default.find(resp.data, { fname: "bar.one" });
                expect(bar).not.toBeNull();
                expect(bar === null || bar === void 0 ? void 0 : bar.stub).toBeTruthy();
                expect(barOne).not.toBeNull();
                expect(barOne === null || barOne === void 0 ? void 0 : barOne.stub).toBeTruthy();
                common_all_1.testUtils.expectSnapshot(expect, "missing snapshots", resp.data);
            });
            test("all", async () => {
                var _a;
                const resp = await store.query("**/*", queryMode, {});
                const rootNode = lodash_1.default.find(resp.data, (n) => n.title === "root");
                const foo = lodash_1.default.find(resp.data, (n) => n.title === "foo");
                const fooChild = lodash_1.default.find(resp.data, (n) => n.title === "foo.one");
                expect(rootNode).not.toBeUndefined();
                expect(fooChild).not.toBeUndefined();
                // expect parent
                expect(fooChild.domain.title).toEqual("foo");
                expect((_a = fooChild.parent) === null || _a === void 0 ? void 0 : _a.id).toEqual(foo.id);
                common_all_1.testUtils.expectSnapshot(expect, "raw-props", fooChild);
            });
        });
        describe("write", () => {
            test("writeQuery", async () => {
                const resp = await store.query("**/*", queryMode, {});
                const node = lodash_1.default.find(resp.data, (n) => n.title === "foo.one");
                node.body = "bond";
                await store.write(node);
                const { data, content } = common_server_1.FileTestUtils.readMDFile(root, "foo.one.md");
                expect(data.title).toEqual("foo.one");
                expect(content).toEqual("bond\n");
                expect(content).toMatchSnapshot("data snapshot");
            });
        });
    });
    describe("schema", () => {
        let queryMode;
        beforeAll(() => {
            queryMode = "schema";
        });
        describe("query", () => {
            test("sanity", async () => {
                const resp = await store.query("**/*", queryMode, {});
                const bar = lodash_1.default.find(resp.data, (n) => n.id === "bar");
                expect(bar.namespace).toBe(true);
            });
            test("all", async () => {
                var _a;
                const resp = await store.query("**/*", queryMode, {});
                const rootNode = lodash_1.default.find(resp.data, (n) => n.title === "root");
                const foo = lodash_1.default.find(resp.data, (n) => n.title === "foo");
                const node = common_all_1.SchemaUtils.matchNote("foo.one", resp.data);
                //const node = _.find(resp.data, (n) => n.title === "one") as IDNode;
                expect(rootNode).not.toBeUndefined();
                expect(node).not.toBeUndefined();
                expect((_a = node.parent) === null || _a === void 0 ? void 0 : _a.id).toEqual(foo.id);
            });
        });
        describe("write", () => {
            test("writeRoot", async () => {
                await store.write(common_all_1.Schema.createRoot());
                const rootYml = common_server_1.FileTestUtils.readYMLFile(root, "root.schema.yml");
                expect(common_all_1.testUtils.omitEntropicProps(rootYml[0])).toMatchSnapshot("root");
            });
        });
    });
});
//# sourceMappingURL=FileStorage.spec.js.map