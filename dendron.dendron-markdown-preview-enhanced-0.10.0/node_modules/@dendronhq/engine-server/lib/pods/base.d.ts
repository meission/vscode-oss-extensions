import { DEngine } from "@dendronhq/common-all";
import { createLogger } from "@dendronhq/common-server";
export declare type PodOptEntry = {
    name: string;
    required: boolean;
    description?: string;
    type: "string";
};
export declare type PodOpts = PodOptEntry[];
export interface Pod<TImportOpts = any> {
    /**
     * Fetch pod from remote
     */
    fetch: () => Promise<void>;
    /**
     * Convert to dendron
     */
    import: (opts: TImportOpts) => Promise<any>;
}
export interface PodClass {
    id: string;
    description: string;
    importOpts: PodOpts;
    new (opts: PodConsOpts): Pod;
}
export declare type PodConsOpts = {
    engine: DEngine;
};
export declare abstract class BasePod<TImportOpts = any> implements Pod<TImportOpts> {
    L: ReturnType<typeof createLogger>;
    protected engine: DEngine;
    constructor(opts: PodConsOpts);
    abstract fetch(): Promise<void>;
    abstract handleImport(opts: TImportOpts): Promise<any>;
    sanityCheck(): Promise<undefined | string>;
    import(opts: TImportOpts): Promise<{
        error: any;
    }>;
}
