"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const engine_1 = require("../../engine");
const filePod_1 = require("../filePod");
// not working on windows, need to investigate
describe("filePod", () => {
    let root;
    let fixtures;
    let engine;
    let actualFiles;
    let expectedFiles;
    beforeEach(async () => {
        root = common_server_1.EngineTestUtils.setupStoreDir();
        fixtures = common_server_1.FileTestUtils.getFixturesRoot(__dirname);
        engine = engine_1.DendronEngine.getOrCreateEngine({
            root,
            forceNew: true,
        });
        await engine.init();
    });
    afterEach(() => {
        fs_extra_1.default.removeSync(root);
    });
    test("sanity", async () => {
        var _a, _b;
        const filesRoot = path_1.default.join(fixtures, "pods", "filePod");
        // const uri = URI.parse(filesRoot);
        const fp = new filePod_1.FilePod({ engine });
        await fp.import({ root: filesRoot });
        // domain note is stub
        let note = lodash_1.default.find(engine.notes, { fname: "project" });
        expect(note.stub).toBeTruthy();
        expect((_a = note.parent) === null || _a === void 0 ? void 0 : _a.fname).toEqual("root");
        expect(note.children.map((n) => n.fname)).toEqual([
            "project.p-3",
            "project.p1",
            "project.p2",
        ]);
        // p1 is not stub
        note = lodash_1.default.find(engine.notes, { fname: "project.p1" });
        expect(note.stub).not.toBeTruthy();
        expect((_b = note.parent) === null || _b === void 0 ? void 0 : _b.fname).toEqual("project");
        expect(note.children.map((n) => n.fname)).toEqual([
            "project.p1.n1",
            "project.p1.n2",
        ]);
        [expectedFiles, actualFiles] = common_server_1.FileTestUtils.cmpFiles(root, common_server_1.LernaTestUtils.fixtureFilesForStore(), {
            add: [
                "project.p1.md",
                "project.p1.n1.md",
                "project.p1.n2.md",
                "project.p2.n1.md",
                "project.p-3.n1.md",
            ],
        });
        expect(expectedFiles).toEqual(actualFiles);
        // check that assets are copied over
        const assetsDir = fs_extra_1.default.readdirSync(path_1.default.join(root, "assets"));
        expect(assetsDir.length).toEqual(3);
        // check that assets are there
        const fileBody = fs_extra_1.default.readFileSync(path_1.default.join(root, "project.p1.md"), {
            encoding: "utf8",
        });
        expect(fileBody.match("n1.pdf")).toBeTruthy();
        expect(fileBody.match("n3.pdf")).toBeTruthy();
    });
});
//# sourceMappingURL=filePod.spec.js.map