"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DConfig = void 0;
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const DENDRON_CONFIG_FILE = "dendron.yml";
function isLegacySiteConfig(site) {
    return !lodash_1.default.isEmpty(lodash_1.default.intersection(lodash_1.default.keys(site), ["noteRoot", "noteRoots", "siteRoot"]));
}
function rewriteSiteConfig(site) {
    const remap = {
        noteRoot: "siteIndex",
        noteRoots: "siteHierarchies",
        siteRoot: "siteRootDir",
    };
    lodash_1.default.each(remap, (v, k) => {
        if (lodash_1.default.has(site, k)) {
            // @ts-ignore
            site[v] = site[k];
            // @ts-ignore
            delete site[k];
        }
    });
    return site;
}
class DConfig {
    static configPath(wsRoot) {
        return path_1.default.join(wsRoot, DENDRON_CONFIG_FILE);
    }
    static genDefaultConfig() {
        return {
            site: {
                siteHierarchies: ["root"],
                siteRootDir: "docs",
            },
        };
    }
    static getOrCreate(dendronRoot) {
        const configPath = DConfig.configPath(dendronRoot);
        let config;
        if (!fs_extra_1.default.existsSync(configPath)) {
            config = DConfig.genDefaultConfig();
            common_server_1.writeYAML(configPath, config);
        }
        else {
            config = common_server_1.readYAML(configPath);
            if (isLegacySiteConfig(config.site)) {
                config.site = rewriteSiteConfig(config.site);
                common_server_1.writeYAML(DConfig.configPath(dendronRoot), config);
            }
        }
        return config;
    }
}
exports.DConfig = DConfig;
//# sourceMappingURL=config.js.map