"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("../../../markdown/utils");
describe("basic", () => {
    describe("parse", () => {
        test("init", () => {
            const resp = utils_1.getProcessor().parse(`((ref:[[foo.md]]))`);
            expect(resp).toMatchSnapshot();
            // child1 paragraph, child2 link
            // @ts-ignore
            expect(resp.children[0].children[0].data.link).toEqual({
                type: "file",
                name: "foo",
                anchorStart: undefined,
                anchorEnd: undefined,
            });
        });
        test("without suffix", () => {
            const resp = utils_1.getProcessor().parse(`((ref:[[foo]]))`);
            expect(resp).toMatchSnapshot();
            // child1 paragraph, child2 link
            // @ts-ignore
            expect(resp.children[0].children[0].data.link).toEqual({
                type: "file",
                name: "foo",
                anchorStart: undefined,
                anchorEnd: undefined,
            });
        });
        test("with start anchor", () => {
            const resp = utils_1.getProcessor().parse(`((ref:[[foo]]#h1))`);
            expect(resp).toMatchSnapshot();
            // child1 paragraph, child2 link
            // @ts-ignore
            expect(resp.children[0].children[0].data.link).toEqual({
                type: "file",
                name: "foo",
                anchorStart: "h1",
                anchorEnd: undefined,
            });
        });
        test("with start and end", () => {
            const resp = utils_1.getProcessor().parse(`((ref:[[foo]]#h1:#h2))`);
            expect(resp).toMatchSnapshot();
            // child1 paragraph, child2 link
            // @ts-ignore
            expect(resp.children[0].children[0].data.link).toEqual({
                type: "file",
                name: "foo",
                anchorStart: "h1",
                anchorEnd: "h2",
            });
        });
        test("doesn't parse inline code block", () => {
            const resp = utils_1.getProcessor().parse("`((ref:[[foo.md]]))`");
            expect(resp).toMatchSnapshot("bond");
            // @ts-ignore
            expect(resp.children[0].children[0].type).toEqual("inlineCode");
        });
        test.skip("doesn't parse code block", () => { });
    });
    describe("stingify", () => {
        let root;
        test("basic", async () => {
            const txt = ["", `# Tasks`, "task1", "task2"];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`((ref:[[daily.tasks]]))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
        });
        test("basic block", async () => {
            const txt = ["", `# Tasks`, "task1", "task2"];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
        });
        test("basic block with fm", async () => {
            const txt = ["---", "id: foo", "---", `# Tasks`, "task1", "task2"];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("---") >= 0).toBeFalsy();
        });
        test("basic block with header and start ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header2))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("task1") >= 0).toBeFalsy();
            expect(out.indexOf("task2") >= 0).toBeTruthy();
        });
        test("basic block with header and start, offset ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header2,1))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header2") >= 0).toBeFalsy();
            expect(out.indexOf("task1") >= 0).toBeFalsy();
            expect(out.indexOf("task2") >= 0).toBeTruthy();
        });
        test("basic block with header, start and end ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
                "<div class='bar'>",
                "BOND",
                "</div>",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header1:#Header2))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header1") >= 0).toBeTruthy();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("task2") >= 0).toBeFalsy();
        });
        test("basic block with header, start and end, offset ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
                "<div class='bar'>",
                "BOND",
                "</div>",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header1,1:#Header2))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header1") >= 0).toBeFalsy();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("task2") >= 0).toBeFalsy();
        });
        test("basic block with wildcard as 1st elem ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
                "<div class='bar'>",
                "BOND",
                "</div>",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#*,1:#header2))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header1") >= 0).toBeTruthy();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("task2") >= 0).toBeFalsy();
        });
        test("basic block with wildcard as 2nd elem ", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
                "<div class='bar'>",
                "BOND",
                "</div>",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header1,1:#*))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header1") >= 0).toBeFalsy();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("task2") >= 0).toBeFalsy();
        });
        test("renderWithOutline", async () => {
            const txt = [
                "---",
                "id: foo",
                "---",
                `# Tasks`,
                "## Header1",
                "task1",
                "## Header2",
                "task2",
                "<div class='bar'>",
                "BOND",
                "</div>",
            ];
            root = await common_server_1.EngineTestUtils.setupStoreDir({
                initDirCb: (dirPath) => {
                    fs_extra_1.default.writeFileSync(path_1.default.join(dirPath, "daily.tasks.md"), txt.join("\n"), { encoding: "utf8" });
                },
            });
            const out = utils_1.getProcessor({ root, renderWithOutline: true })
                .processSync(`# Foo Bar
((ref:[[daily.tasks]]#Header1:#Header2))`)
                .toString();
            expect(out).toMatchSnapshot();
            expect(out.indexOf("Header1") >= 0).toBeTruthy();
            expect(out.indexOf("task1") >= 0).toBeTruthy();
            expect(out.indexOf("task2") >= 0).toBeFalsy();
        });
    });
});
//# sourceMappingURL=dendronRefsPlugin.spec.js.map