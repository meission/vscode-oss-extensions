"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const common_server_1 = require("@dendronhq/common-server");
const lodash_1 = __importDefault(require("lodash"));
const replaceRefs_1 = require("./plugins/replaceRefs");
const utils_1 = require("./utils");
const engine_1 = require("../../engine");
const common_all_1 = require("@dendronhq/common-all");
// @ts-ignore
const mdSimple = `
# H1 Header

h1 content

h1.1 content

## H2 Header

h2 content

### H3 Header

h3 content

- bullet1
- bullet2

1. ordered1
2. ordered2

\`\`\`
code fence
\`\`\`

\`code span\`

- [link](normal-link)
- ![image](image-link.jpg)
- [[foo-wiki-link]]
- [[label|foo-wiki-link]]
- [[label|foo-wiki-link]]#foobar
`;
describe("replaceRefs", () => {
    // @ts-ignore
    let root;
    beforeEach(() => {
        root = common_server_1.EngineTestUtils.setupStoreDir();
    });
    test("imagePrefix", () => {
        // const uri = path.join(root, "sample.image-link.md");
        // const note = createNoteFromMarkdown(uri);
        // expect(note.toRawProps(false, { ignoreNullParent: true })).toMatchSnapshot(
        //   "rawprops"
        // );
        const out = utils_1.getProcessor()
            .use(replaceRefs_1.replaceRefs, { imageRefPrefix: "bond/" })
            .processSync(`![alt-text](image-url.jpg)`);
        expect(lodash_1.default.trim(out.toString())).toEqual("![alt-text](bond/image-url.jpg)");
    });
    test("wiki2Md", () => {
        const links = `
[link](normal-link)

- [[foo-wiki-link]]
- [[label|foo-wiki-link]]
- [[label|foo-wiki-link]]#foobar
    `;
        const proc = utils_1.getProcessor().use(replaceRefs_1.replaceRefs, { wikiLink2Md: true });
        const out = proc.processSync(links);
        const tokens = proc.parse(links);
        expect(out.toString()).toMatchSnapshot("raw");
        expect(tokens).toMatchSnapshot("parsed");
    });
    test("wiki2Md and swap id", async () => {
        const engine = engine_1.DendronEngine.getOrCreateEngine({ root });
        await engine.init();
        const proc = utils_1.getProcessor().use(replaceRefs_1.replaceRefs, {
            wikiLink2Md: true,
            wikiLinkUseId: true,
            engine,
        });
        const note = common_all_1.DNodeUtils.getNoteByFname("engine-server.replace-refs", engine, { throwIfEmpty: true });
        const out = proc.processSync(note.body);
        expect(out.toString()).toMatchSnapshot("raw");
    });
});
//# sourceMappingURL=markdown.spec.js.map