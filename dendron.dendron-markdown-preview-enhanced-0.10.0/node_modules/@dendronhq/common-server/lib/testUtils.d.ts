/// <reference types="jest" />
import matter from "gray-matter";
import { DirResult } from "tmp";
import { NoteRawProps, DNodeRawProps } from "@dendronhq/common-all";
export { DirResult };
export declare type FileItem = {
    path: string;
};
export declare class FileTestUtils {
    /**
     * Compare files in root with expected
     * @param root
     * @param expected
     * @param opts
     */
    static cmpFiles: (root: string, expected: string[], opts?: {
        add?: string[] | undefined;
        remove?: string[] | undefined;
        ignore?: string[] | undefined;
    } | undefined) => string[][];
    static createFiles(root: string, files: FileItem[]): Promise<void[]>;
    static getFixturesRoot(base: string): string;
    static getPkgRoot(base: string, fname?: string): string;
    static setupDir(from: string, to: string): void;
    static tmpDir(): DirResult;
    static readMDFile: (root: string, fname: string) => matter.GrayMatterFile<string>;
    static readYMLFile: (root: string, fname: string) => any;
    static writeMDFile: (root: string, fname: string, fm: any, body: string) => void;
}
export declare class NodeTestUtils {
    static createNotes: (vaultPath: string, notes: Partial<NoteRawProps>[], opts?: {
        withBody: boolean;
    } | undefined) => void;
    static cleanNodeMeta: (opts: {
        payload: DNodeRawProps[];
        fields: string[];
    }) => Partial<Required<import("@dendronhq/common-all").DNodeRawOpts<import("@dendronhq/common-all").DNodeData>>>[];
    static assertNodeBody: (opts: {
        expect: jest.Expect;
        payload: DNodeRawProps[];
        expected: {
            fname: string;
            body: string;
        }[];
    }) => void;
}
export declare class LernaTestUtils {
    static getRootDir(): string;
    static getFixturesDir(type?: string): string;
    static fixtureFilesForStore(): string[];
}
export declare type DendronVaultOpts = {
    /**
     * Destination. Default: create a tmp directory
     */
    root?: string;
    /**
     * Fixture to copy from. Default: 'store'
     */
    fixtureDir?: string;
    /**
     * Copy fixtures. Default: true
     */
    copyFixtures?: boolean;
};
export declare class EngineTestUtils {
    /**
     * setupStoreDir
     */
    static setupStoreDir(opts?: {
        storeDirSrc?: string;
        storeDstPath?: string;
        copyFixtures?: boolean;
        initDirCb?: (dirPath: string) => void;
    }): string;
}
