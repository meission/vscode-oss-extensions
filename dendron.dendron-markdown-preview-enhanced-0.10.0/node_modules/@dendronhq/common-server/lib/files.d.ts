/// <reference types="node" />
import { Note, NoteRawProps, Schema } from "@dendronhq/common-all";
import { Dirent } from "fs";
interface FileMeta {
    name: string;
}
export declare type getAllFilesOpts = {
    root: string;
    include?: string[];
    exclude?: string[];
    withFileTypes?: boolean;
};
/**
 * Make name safe for dendron
 * @param name
 * @param opts
 */
export declare function cleanName(name: string): string;
/**
 *
 * Normalize file name
 * - strip off extension
 * - replace [.\s] with -
 * @param name
 * @param opts
 *   - isDir: dealing with directory
 */
export declare function cleanFileName(name: string, opts?: {
    isDir?: boolean;
}): string;
export declare function readMD(fpath: string): {
    data: any;
    content: string;
};
export declare function readYAML(fpath: string): any;
export declare function writeYAML(fpath: string, data: any): void;
export declare function fileMeta2Node(body: string, meta: FileMeta): Note;
export declare function deleteFile(fpath: string): void;
export declare function globMatch(patterns: string[] | string, fname: string): boolean;
export declare function getAllFiles(opts: getAllFilesOpts): Dirent[] | string[];
export declare function mdFile2NodeProps(fpath: string): NoteRawProps;
export declare function node2PropsMdFile(props: NoteRawProps, opts: {
    root: string;
}): void;
/**
 * Convert a node to a MD File. Any custom attributes will be
 * added to the end
 *
 * @param node: node to convert
 * @param opts
 *   - root: root folder where files should be written to
 */
export declare function node2MdFile(node: Note, opts: {
    root: string;
}): void;
export declare function schema2YMLFile(schema: Schema, opts: {
    root: string;
}): void;
export declare function resolveTilde(filePath: string): string;
/**
 * Resolve file path and resolve relative paths relative to `root`
 * @param filePath
 * @param root
 */
export declare function resolvePath(filePath: string, root?: string): string;
export declare function removeMDExtension(nodePath: string): string;
export {};
