"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mume = require("../../src/mume");
const path = require("path");
const os = require("os");
describe("gen", () => {
    test("basic", () => {
        expect(1).toEqual(1);
    });
});
describe("MarkdownEngine", () => {
    test("basic", () => __awaiter(void 0, void 0, void 0, function* () {
        const configPath = path.resolve(os.homedir(), ".mume"); // use here your own config folder, default is "~/.mume"
        yield mume.init(configPath); // default uses "~/.mume"
        const engine = new mume.MarkdownEngine({
            filePath: "./test/integration/fixtures/dendron/ref.md",
            projectDirectoryPath: "./test/integration/fixtures/dendron",
            config: {
                configPath: configPath,
                previewTheme: "github-light.css",
                // revealjsTheme: "white.css"
                codeBlockTheme: "default.css",
                printBackground: true,
                enableScriptExecution: true,
            },
        });
        const out = yield engine.parseMD(["((ref:[[ref]]))", "---", "", "`code span`" + "some text"].join("\n"), {
            isForPreview: false,
            useRelativeFilePath: false,
            hideFrontMatter: false,
        });
        expect(out).toMatchSnapshot();
    }));
    test("with header", () => __awaiter(void 0, void 0, void 0, function* () {
        const configPath = path.resolve(os.homedir(), ".mume"); // use here your own config folder, default is "~/.mume"
        yield mume.init(configPath); // default uses "~/.mume"
        const engine = new mume.MarkdownEngine({
            filePath: "./test/integration/fixtures/dendron/ref.md",
            projectDirectoryPath: "./test/integration/fixtures/dendron",
            config: {
                configPath: configPath,
                previewTheme: "github-light.css",
                // revealjsTheme: "white.css"
                codeBlockTheme: "default.css",
                printBackground: true,
                enableScriptExecution: true,
            },
        });
        const out = yield engine.parseMD([
            "((ref:[[ref]]#h2 header))",
            "---",
            "",
            "`code span`" + "some text",
        ].join("\n"), {
            isForPreview: false,
            useRelativeFilePath: false,
            hideFrontMatter: false,
        });
        expect(out).toMatchSnapshot();
        expect(out.html.indexOf("h1 header") < 0).toBeTruthy();
        expect(out.html.indexOf("h2 header") < 0).toBeFalsy();
    }));
    test("with header offset", () => __awaiter(void 0, void 0, void 0, function* () {
        const configPath = path.resolve(os.homedir(), ".mume"); // use here your own config folder, default is "~/.mume"
        yield mume.init(configPath); // default uses "~/.mume"
        const engine = new mume.MarkdownEngine({
            filePath: "./test/integration/fixtures/dendron/ref.md",
            projectDirectoryPath: "./test/integration/fixtures/dendron",
            config: {
                configPath: configPath,
                previewTheme: "github-light.css",
                // revealjsTheme: "white.css"
                codeBlockTheme: "default.css",
                printBackground: true,
                enableScriptExecution: true,
            },
        });
        const out = yield engine.parseMD([
            "((ref:[[ref]]#h2 header,1))",
            "---",
            "",
            "`code span`" + "some text",
        ].join("\n"), {
            isForPreview: false,
            useRelativeFilePath: false,
            hideFrontMatter: false,
        });
        expect(out).toMatchSnapshot();
        expect(out.html.indexOf("h1 header") < 0).toBeTruthy();
        expect(out.html.indexOf("h2 header") < 0).toBeTruthy();
    }));
    test("with wildcard", () => __awaiter(void 0, void 0, void 0, function* () {
        const configPath = path.resolve(os.homedir(), ".mume"); // use here your own config folder, default is "~/.mume"
        yield mume.init(configPath); // default uses "~/.mume"
        const engine = new mume.MarkdownEngine({
            filePath: "./test/integration/fixtures/dendron/ref.md",
            projectDirectoryPath: "./test/integration/fixtures/dendron",
            config: {
                configPath: configPath,
                previewTheme: "github-light.css",
                // revealjsTheme: "white.css"
                codeBlockTheme: "default.css",
                printBackground: true,
                enableScriptExecution: true,
            },
        });
        const out = yield engine.parseMD([
            "((ref:[[ref]]#h1 header,1:#*))",
            "---",
            "",
            "`code span`" + "some text",
        ].join("\n"), {
            isForPreview: false,
            useRelativeFilePath: false,
            hideFrontMatter: false,
        });
        expect(out.html).toMatchSnapshot();
        expect(out.html.indexOf("h1 header") < 0).toBeTruthy();
        expect(out.html.indexOf("h2 header") < 0).toBeTruthy();
    }));
});
//# sourceMappingURL=dendron.test.js.map