"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtilsCommonAll = exports.expectNodeEqual = exports.expectSnapshot = exports.toSnapshotProps = void 0;
const lodash_1 = __importDefault(require("lodash"));
function omitEntropicProps(obj, tsOnly) {
    if (tsOnly) {
        return lodash_1.default.omit(obj, "updated", "created");
    }
    return lodash_1.default.omit(obj, "id", "parent", "children", "updated", "created");
}
/**
 * Remove properties that change
 * @param n1
 */
function toSnapshotProps(n1, opts) {
    var _a;
    const out = omitEntropicProps(n1.toRawProps(false, opts));
    const parent = ((_a = n1.parent) === null || _a === void 0 ? void 0 : _a.title) || "root";
    const children = n1.children.map((c) => c.title);
    return { ...out, parent, children };
}
exports.toSnapshotProps = toSnapshotProps;
function expectSnapshot(expect, name, n1) {
    let snap;
    if (lodash_1.default.isArrayLike(n1)) {
        snap = n1.map((n) => toSnapshotProps(n, { ignoreNullParent: true }));
    }
    else {
        snap = toSnapshotProps(n1, { ignoreNullParent: true });
    }
    expect(snap).toMatchSnapshot(name);
}
exports.expectSnapshot = expectSnapshot;
function expectNodeEqual(expect, n1, n2) {
    expect(n1.id).toEqual(n2.id);
}
exports.expectNodeEqual = expectNodeEqual;
exports.testUtilsCommonAll = {
    expectNodeEqual,
    expectSnapshot,
    toSnapshotProps,
    omitEntropicProps,
};
//# sourceMappingURL=testUtils.js.map