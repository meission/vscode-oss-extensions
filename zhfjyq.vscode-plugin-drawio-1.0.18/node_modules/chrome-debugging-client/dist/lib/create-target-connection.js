"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
function createTargetConnection(client, sessionId) {
    return new TargetConnection(client, sessionId);
}
exports.default = createTargetConnection;
class TargetConnection extends events_1.EventEmitter {
    constructor(client, sessionId) {
        super();
        this.client = client;
        this.sessionId = sessionId;
        this.onMessage = this.onMessage.bind(this);
        this.onDetach = this.onDetach.bind(this);
        this.onError = this.onError.bind(this);
        this.onClose = this.onClose.bind(this);
        this.installListeners();
    }
    send(message) {
        const { sessionId } = this;
        return this.client.send("Target.sendMessageToTarget", {
            message,
            sessionId,
        });
    }
    close() {
        const { sessionId } = this;
        return this.client.send("Target.detachFromTarget", { sessionId });
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            const { sessionId } = this;
            if (sessionId !== undefined) {
                try {
                    yield this.close();
                }
                catch (err) {
                    // ignore in dispose
                    // tslint:disable-next-line:no-console
                    console.error(err);
                }
                this.sessionId = undefined;
                this.uninstallListeners();
            }
        });
    }
    installListeners() {
        const { client } = this;
        client.on("Target.receivedMessageFromTarget", this.onMessage);
        client.on("Target.detachedFromTarget", this.onDetach);
        client.on("error", this.onError);
        client.on("close", this.onClose);
    }
    uninstallListeners() {
        const { client } = this;
        client.removeListener("Target.receivedMessageFromTarget", this.onMessage);
        client.removeListener("Target.detachedFromTarget", this.onDetach);
        client.removeListener("error", this.onError);
        client.removeListener("close", this.onClose);
    }
    onMessage({ sessionId, message, }) {
        if (this.sessionId === sessionId) {
            this.emit("message", message);
        }
    }
    onDetach({ sessionId }) {
        if (this.sessionId === sessionId) {
            this.onClose();
        }
    }
    onClose() {
        this.emit("close");
        this.sessionId = undefined;
        this.uninstallListeners();
    }
    onError(err) {
        this.emit("error", err);
    }
}
//# sourceMappingURL=create-target-connection.js.map