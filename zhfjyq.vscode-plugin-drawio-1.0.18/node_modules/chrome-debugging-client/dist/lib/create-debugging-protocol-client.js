"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
function createDebuggingProtocolClient(connection) {
    return new DebuggingProtocol(connection);
}
exports.default = createDebuggingProtocolClient;
/* tslint:disable:max-classes-per-file */
class DebuggingProtocol extends events_1.EventEmitter {
    constructor(connection) {
        super();
        this.connection = connection;
        this.seq = 0;
        this.pendingRequests = new Map();
        this.onMessage = this.onMessage.bind(this);
        this.onError = this.onError.bind(this);
        this.onClose = this.onClose.bind(this);
        this.connection.on("message", this.onMessage);
        this.connection.on("error", this.onError);
        this.connection.on("close", this.onClose);
    }
    send(method, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = this.createRequest(method, params);
            try {
                const [, response] = yield Promise.all([
                    this.sendRequest(request),
                    this.getResponse(request),
                ]);
                return response;
            }
            finally {
                this.deleteRequest(request);
            }
        });
    }
    onMessage(data) {
        try {
            const msg = JSON.parse(data);
            if (msg.id !== undefined) {
                const request = this.pendingRequests.get(msg.id);
                if (request) {
                    request.resolve(msg);
                }
            }
            else {
                this.emit(msg.method, msg.params);
            }
        }
        catch (err) {
            this.onError(err);
        }
    }
    close() {
        return this.connection.close();
    }
    onClose() {
        this.clearPending(new Error("socket disconnect"));
        this.emit("close");
    }
    onError(err) {
        this.clearPending(err);
        this.emit("error", err);
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            this.connection.removeListener("message", this.onMessage);
            this.connection.removeListener("error", this.onError);
            this.connection.removeListener("close", this.onClose);
        });
    }
    createRequest(method, params) {
        const req = new CommandRequest(this.seq++, method, params);
        this.pendingRequests.set(req.id, req);
        return req;
    }
    getResponse(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield request.response;
            if (response.error) {
                throw protocolError(response.error);
            }
            return response.result;
        });
    }
    sendRequest(req) {
        return this.connection.send(JSON.stringify(req));
    }
    deleteRequest(req) {
        this.pendingRequests.delete(req.id);
    }
    clearPending(err) {
        if (this.pendingRequests.size) {
            this.pendingRequests.forEach(req => {
                req.reject(err);
            });
            this.pendingRequests.clear();
        }
    }
}
class CommandRequest {
    constructor(id, method, params) {
        this.id = id;
        this.method = method;
        this.params = params;
        this.response = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
function protocolError({ message, code, data }) {
    const msg = data ? `${message}:${data}` : message;
    const err = new Error(msg);
    return Object.assign(err, { code });
}
//# sourceMappingURL=create-debugging-protocol-client.js.map