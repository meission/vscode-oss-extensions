"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const WebSocket = require("ws");
const event_promise_1 = require("./event-promise");
function openWebSocket(url) {
    return __awaiter(this, void 0, void 0, function* () {
        const ws = new WebSocket(url);
        yield event_promise_1.eventPromise(ws, "open", "error");
        return new WebSocketConnection(ws);
    });
}
exports.default = openWebSocket;
class WebSocketConnection extends events_1.EventEmitter {
    constructor(ws) {
        super();
        this.ws = ws;
        ws.on("message", this.onMessage.bind(this));
        ws.on("error", this.onError.bind(this));
        ws.on("close", this.onClose.bind(this));
    }
    send(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield send(this.ws, message);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.ws.readyState === WebSocket.CLOSED) {
                return;
            }
            this.ws.removeAllListeners();
            const closePromise = event_promise_1.eventPromise(this.ws, "close", "error");
            this.ws.close();
            yield closePromise;
        });
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.close();
            }
            catch (err) {
                // ignore err since dispose is called in a finally
                // tslint:disable-next-line:no-console
                console.error(err);
            }
        });
    }
    onMessage(msg) {
        this.emit("message", msg);
    }
    onError(err) {
        this.emit("error", err);
    }
    onClose() {
        this.emit("close");
        this.ws.removeAllListeners();
    }
}
function send(ws, data) {
    return new Promise((resolve, reject) => ws.send(data, err => {
        if (err) {
            reject(err);
        }
        else {
            resolve();
        }
    }));
}
//# sourceMappingURL=open-web-socket.js.map