"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const finder = require("chrome-launcher/dist/chrome-finder");
const utils_1 = require("chrome-launcher/dist/utils");
const CANARY_PATTERN = /Canary|unstable|SxS/i;
function resolveBrowser(options) {
    let executablePath = (options && options.executablePath) ||
        process.env.LIGHTHOUSE_CHROMIUM_PATH ||
        process.env.CHROME_PATH ||
        process.env.CHROME_BIN;
    let browserType = options && options.browserType;
    if (browserType === undefined) {
        browserType = executablePath === undefined ? "system" : "exact";
    }
    if (browserType === "exact") {
        if (executablePath === undefined) {
            throw new Error(`browserType exact requires the executablePath be specified or set as CHROME_PATH`);
        }
    }
    else {
        executablePath = findExecutablePath(browserType);
    }
    return executablePath;
}
exports.default = resolveBrowser;
function findExecutablePath(browserType) {
    const platform = utils_1.getPlatform();
    let executablePaths;
    if (isFinder(platform)) {
        executablePaths = finder[platform]();
    }
    if (executablePaths !== undefined) {
        if (browserType === "canary") {
            executablePaths = executablePaths.filter(p => CANARY_PATTERN.test(p));
        }
    }
    if (executablePaths === undefined || executablePaths.length === 0) {
        throw new Error(`Unable to find browser for type ${browserType}`);
    }
    return executablePaths[0];
}
function isFinder(platform) {
    return typeof finder[platform] === "function";
}
//# sourceMappingURL=resolve-browser.js.map