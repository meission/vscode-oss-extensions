"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class Disposables {
    constructor() {
        this.disposables = [];
    }
    add(disposable) {
        this.disposables.push(disposable);
        return disposable;
    }
    dispose() {
        return __awaiter(this, void 0, void 0, function* () {
            const { disposables } = this;
            let disposable;
            while ((disposable = disposables.pop()) !== undefined) {
                try {
                    yield disposable.dispose();
                }
                catch (err) {
                    // intentionally ignored because dispose meant to be called from finally
                    // don't want to overwrite the error
                    // tslint:disable-next-line:no-console
                    console.error(err);
                }
            }
        });
    }
}
exports.default = Disposables;
//# sourceMappingURL=disposables.js.map